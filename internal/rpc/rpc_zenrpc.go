// Code generated by zenrpc v2.2.12; DO NOT EDIT.

package rpc

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	NewsService     struct{ Get, GetByID, Count string }
	TagService      struct{ Get string }
	CategoryService struct{ Get string }
}{
	NewsService: struct{ Get, GetByID, Count string }{
		Get:     "get",
		GetByID: "getbyid",
		Count:   "count",
	},
	TagService: struct{ Get string }{
		Get: "get",
	},
	CategoryService: struct{ Get string }{
		Get: "get",
	},
}

func (NewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Get": {
				Description: `Get возвращает список новостей по указанным фильтрам`,
				Parameters: []smd.JSONSchema{
					{
						Name:     "filter",
						Type:     smd.Object,
						TypeName: "NewsFilter",
						Properties: smd.PropertyList{
							{
								Name: "cat",
								Type: smd.Integer,
							},
							{
								Name: "tag",
								Type: smd.Integer,
							},
						},
					},
					{
						Name:     "page",
						Type:     smd.Object,
						TypeName: "PageRequest",
						Properties: smd.PropertyList{
							{
								Name: "page_size",
								Type: smd.Integer,
							},
							{
								Name: "page_num",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]News",
					Items: map[string]string{
						"$ref": "#/definitions/News",
					},
					Definitions: map[string]smd.Definition{
						"News": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "news_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name: "foreword",
									Type: smd.String,
								},
								{
									Name: "content",
									Type: smd.String,
								},
								{
									Name:     "author",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "published_at",
									Type: smd.String,
								},
								{
									Name: "category",
									Ref:  "#/definitions/Category",
									Type: smd.Object,
								},
								{
									Name: "tags",
									Type: smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Tag",
									},
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "category_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tag_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
				Errors: map[int]string{
					500: "server error",
					404: "news not found",
				},
			},
			"GetByID": {
				Description: `GetByID возвращает новость по ID`,
				Parameters: []smd.JSONSchema{
					{
						Name: "id",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Object,
					TypeName: "News",
					Properties: smd.PropertyList{
						{
							Name: "news_id",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name: "foreword",
							Type: smd.String,
						},
						{
							Name: "content",
							Type: smd.String,
						},
						{
							Name:     "author",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "published_at",
							Type: smd.String,
						},
						{
							Name: "category",
							Ref:  "#/definitions/Category",
							Type: smd.Object,
						},
						{
							Name: "tags",
							Type: smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/Tag",
							},
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "category_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tag_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
				Errors: map[int]string{
					500: "server error",
					404: "news not found",
				},
			},
			"Count": {
				Description: `Count возвращает количество новостей по указанному фильтру`,
				Parameters: []smd.JSONSchema{
					{
						Name:     "filter",
						Type:     smd.Object,
						TypeName: "NewsFilter",
						Properties: smd.PropertyList{
							{
								Name: "cat",
								Type: smd.Integer,
							},
							{
								Name: "tag",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Integer,
				},
				Errors: map[int]string{
					500: "server error",
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s NewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.NewsService.Get:
		var args = struct {
			Filter NewsFilter  `json:"filter"`
			Page   PageRequest `json:"page"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filter", "page"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Get(ctx, args.Filter, args.Page))

	case RPC.NewsService.GetByID:
		var args = struct {
			Id int `json:"id"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"id"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetByID(ctx, args.Id))

	case RPC.NewsService.Count:
		var args = struct {
			Filter NewsFilter `json:"filter"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filter"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Count(ctx, args.Filter))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (TagService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Get": {
				Description: `Get возвращает список тэгов`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Tag",
					Items: map[string]string{
						"$ref": "#/definitions/Tag",
					},
					Definitions: map[string]smd.Definition{
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "tag_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
				Errors: map[int]string{
					500: "server error",
					404: "tags not found",
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s TagService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	case RPC.TagService.Get:
		resp.Set(s.Get(ctx))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (CategoryService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Get": {
				Description: `Get возвращает список категорий`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Category",
					Items: map[string]string{
						"$ref": "#/definitions/Category",
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "category_id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
				Errors: map[int]string{
					500: "server error",
					404: "categories not found",
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s CategoryService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}

	switch method {
	case RPC.CategoryService.Get:
		resp.Set(s.Get(ctx))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
